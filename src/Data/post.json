[
  {
    "url": "welcome",
    "title": "😀 안녕하세요.",
    "des": "안녕하세요! ",
    "content": "![main](https://user-images.githubusercontent.com/57896501/118286881-e2405000-b50d-11eb-8233-847508eca3c1.png)\n### 😀 안녕하세요!\n안녕하세요! 저는 ___강동민___, ___r.ehdals___, ___kangdongmandoo___ 라는 닉네임으로 활동중인 취미로 프로그래밍하는 학생입니다!  \n### 🎡 이곳은 어디인가요?\n여기는 저의 개인 블로그입니다. 주로 **프로그래밍**에 관련된 글들이 올라옵니다.\n### 📝 무슨 언어 또는 라이브러리를 즐겨 사용하나요?\n저는 `HTML&css`, `javascript`, `react`, `svelte` 등 프론트엔드에 관련된 언어(라이브러리)를 즐겨 사용합니다.\n### 🔨 오류가 발생했어요.\n제작한지 얼마 안된 프로젝트라 오류가 많습니다.\n[깃허브 이슈](https://github.com/kangdongmandoo/r.ehdals/issues)에 오류를 알려주세요.  \n### 🔥 앞으로의 계획\n이 사이트는 저만 글을 쓸 수 있는 반면 계획중인 사이트는 게시판 형식의 사이트로 계정만 있다면 모두가 글을 작성할 수 있게  제작해볼 것 입니다.",
    "tags": ["welcome"],
    "time": "2021/05/14"
  },
  {
    "url": "use-markdown",
    "title": "Markdown 사용하기",
    "des": "🎈 마크다운 사용하기",
    "content": "## 📜 Markdown 사용하기\n마크다운은 문법이 쉬워 많은 사람들에게 사랑을 받고 있는 마크업 언어입니다. \n### 확장자\nMarkdown의 확장자는 `.md`입니다.\n### 제목 (Title)\n`<h1>` ~ `<h6>`까지 `#`를 통해 나타낼 수 있습니다.\n```markdown\n# h1tag\n## h2tag\n### h3tag\n#### h4tag\n##### h5tag\n###### h6tag\n```\n### 텍스트 강조\n**는 `<strong>`태그로 변환됩니다.  \n_는 `<em>`태그로 변환됩니다.  \n~~는 `<del>`태그로 변환됩니다.\n```markdown\nHello, World!  \n**Hello, World!**  \n_Hello, World!_  \n~~Hello, World!~~\n```\nHello, World!  \n**Hello, World!**  \n_Hello, World!_  \n~~Hello, World!~~\n## 인용\n`>`는 `<blockquote>`태그를 변환합니다.\n```markdown\n> Hello, World!\n```\n> Hello, World!\n### 링크\n`<a>`태그로 변환됩니다.\n```markdown\n[구글 홈페이지](https://www.google.com/)에 접속하세요.\n```\n[구글 홈페이지](https://www.google.com/)에 접속하세요.\n### 이미지\n`<img>`태그로 변환됩니다.\n```markdown\n![Google](https://www.google.com/images/branding/googleg/1x/googleg_standard_color_128dp.png)\n```\n![Google](https://www.google.com/images/branding/googleg/1x/googleg_standard_color_128dp.png)  \n\n## ❗ 알아주세요.\n제가 말하는 **변환된다**라는 표현은 쓰기 편하여 사용한 단어입니다.  \n라이브러리를 사용해야 HTML으로 변환된다는 점 알아주세요.  \n또, `만 쓰면 라이브러리가 자동으로 변환해주는 관계로 마크다운의 코드 문법(```)을  적지 않았습니다.",
    "tags": ["markdown"],
    "time": "2021/05/14"
  },
  {
    "url": "copy-folder",
    "title": "Nodejs를 이용해 폴더 복제하기",
    "des": "Nodejs를 이용해 폴더 복제하기",
    "content": "## 서론\n가끔 프로그래밍을 하다보면 폴더를 복제해야할때가 있습니다. 그때마다 **'fs-extra'** 와 같은 모듈을 사용했는데 직접 만들어 사용하는 것도 나쁘지 않을 것 같아 제작해보았습니다.  \n먼저 node의 **'fs'** 와 **'path'** 를 이용해  폴더를 읽은 후, 폴더인지 파일인지 확인하고 파일이면 그 파일을 읽고 다른 폴더에 복제하는 방식으로 진행하였습니다.\n## 코드\n```js\n// index.js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction isdir(dir) {\n  try {\n    return fs.lstatSync(dir).isDirectory(); // 폴더면 true, 파일이면 false를 변환\n  } catch (e) {\n    return false; // 오류가 나면 fase를 변환\n  }\n}\n\nfunction read(dir, out) {\n  const p = fs.readdirSync(dir); // 폴더를 읽음 (ls, dir)\n  p.forEach((e) => {\n    if (isdir(path.join(dir, e))) {\n      if (!fs.existsSync(path.join(out, e))) {\n        fs.mkdirSync(path.join(out, e));\n      } // 폴더가 없을 경우 폴더 생성\n      read(path.join(dir, e), path.join(out, e));\n    } else {\n      fs.writeFileSync(path.join(out, e), fs.readFileSync(path.join(dir, e))); // 파일이면 그 파일을 읽고 생성\n    }\n  });\n}\n\nfunction Clone(dir, out) {\n  if (!fs.existsSync(out)) {\n    fs.mkdirSync(out);\n  } // 만약 out 폴더가 없다면 폴더 생성\n  read(dir, out);\n}\nmodule.exports = Clone;\n```\n```js\n// main.js\nconst copy = require(\"./index\");\ncopy(\"복제할 폴더\", \"결과를 저장할 폴더\");\n```\n## 느낀점\n이렇게 간단한 폴더 복제 함수를 제작해보았습니다.  \n쉽긴 하지만 아무래도 간단하게 만들어서 'fs-extra'와 같은 모듈보다 오류가 많을 것 같습니다.  \n위 코드를 [Github](https://github.com/kangdongmandoo/clone)에 올려두었습니다. 전체 코드가 궁금하다면 깃허브를 확인해주세요.",
    "tags": ["nodejs"],
    "time": "2021/7/5"
  }
]
